buildscript {
    ext.deps = [
            'gson'                    : "com.google.code.gson:gson:${gsonVersion}",
            'pusher'                  : "com.pusher:pusher-java-client:${pusherVersion}",
            'okhttp'                  : "com.squareup.okhttp3:okhttp:${okhttpVersion}",
            'okhttpLoggingInterceptor': "com.squareup.okhttp3:logging-interceptor:${okhttpVersion}",
            'okhttpUrlConnection'     : "com.squareup.okhttp3:okhttp-urlconnection:${okhttpVersion}",
            'retrofit'                : "com.squareup.retrofit2:retrofit:${retrofitVersion}",
            'retrofitGson'            : "com.squareup.retrofit2:converter-gson:${retrofitVersion}",
            'codeGenApi'              : "io.freefair.gradle:code-generator-api:${codeGenVersion}",
            'javapoet'                : "com.squareup:javapoet:${javapoetVersion}",
            'websocket'               : "org.java-websocket:Java-WebSocket:${websocketVersion}",
            'junitPlatform'           : "org.junit.platform:junit-platform-engine:${junitPlatformVersion}",
            'junitJupiter'            : "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}",
            'mockWebServer'           : "com.squareup.okhttp3:mockwebserver:${mockWebServerVersion}",
            'retrofitMock'            : "com.squareup.retrofit2:retrofit-mock:${retrofitMockVersion}",
            'mockito'                 : "org.mockito:mockito-core:${mockitoVerson}",
            'mockitoJupiter'          : "org.mockito:mockito-junit-jupiter:${mockitoVerson}",
            'mockitoInline'           : "org.mockito:mockito-inline:${mockitoVerson}",
            'awaitility'              : "org.awaitility:awaitility-kotlin:${awaitilityVersion}",
            'log4j2Api'               : "org.apache.logging.log4j:log4j-api:${log4j2Version}",
            'log4j2Core'              : "org.apache.logging.log4j:log4j-core:${log4j2Version}",
    ]

    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            name = 'ajoberstar-backup'
            url = 'https://ajoberstar.org/bintray-backup/'
        }
    }
}

plugins {
    id 'io.freefair.lombok' version "${lombokVersion}"
    id 'com.github.johnrengelman.shadow' version "${shadowVersion}"
    id 'org.ajoberstar.git-publish' version "${gitPublishVersion}"
}

def local = new Properties()
File file = project.rootProject.file('local.properties')
if (file.exists()) local.load(file.newDataInputStream())

for (prop in local) {
    project.ext.setProperty(prop.key, prop.value)
}

allprojects {
    group = GROUP
    version = VERSION_NAME

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    javadoc {
        dependsOn delombok
        source = delombok.target
        // exclude any implementation packages
        exclude '**/impl/**'
        // exclude any implementation classes
        exclude '**/*Impl.java'
    }

    artifacts {
        archives shadowJar
    }

    lombok {
        config['lombok.addLombokGeneratedAnnotation'] = 'false'
    }
}

wrapper {
    gradleVersion = "${gradleVersion}"
    distributionType = Wrapper.DistributionType.ALL
}
